!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("int-seq-generator",[],r):"object"==typeof exports?exports["int-seq-generator"]=r():e["int-seq-generator"]=r()}(window,function(){return function(e){var r={};function n(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)n.d(t,o,function(r){return e[r]}.bind(null,o));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=0)}([function(e,r,n){"use strict";var t=n(1),o=n(2);e.exports={recaman:t.recaman,recamanSequence:t.recamanSequence,fibonacci:o.fibonacci,fibonacciSequnce:o.fibonacciSequence}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.recaman=function(e){var r,n=[],t=0;if("number"!=typeof e)throw r=new Error("Input must be of type number"),console.error(r.stack),r;for(var o=1;o<=e;o++)t-o>0&&!n.includes(t-o)?(t-=o,n.push(t)):(t+=o,n.push(t));return t},r.recamanSequence=function(e){var r,n=[],t=0;if("number"!=typeof e)throw r=new Error("Input must be of type number"),console.error(r.stack),r;for(var o=1;o<=e;o++)t-o>0&&!n.includes(t-o)?(t-=o,n.push(t)):(t+=o,n.push(t));return n}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.fibonacciSequence=r.fibonacci=void 0;var t=function(e){if(e<0||"number"!=typeof e){var r=new Error("Invalid input: must be a positive integer or 0.");throw console.error(r.stack),r}return!0};r.fibonacci=function e(r){return t(r),0===r||1===r?r:e(r-2)+e(r-1)};r.fibonacciSequence=function(e){var r=[];t(e);for(var n=0;n<=e;n++)0===n||1===n?r.push(n):r.push(r[n-1]+r[n-2]);return r}}])});